import { pgTable, text, timestamp, pgEnum, json, integer, boolean } from "drizzle-orm/pg-core";

export const tag = pgEnum("tag", ["website", "editor", "other", "everywhere"]);
export const status = pgEnum("status", [
	"pending",
	"good",
	"implemented",
	"in-dev",
	"incompatible",
	"impractical",
	"rejected",
	"impossible",
]);
export const roles = pgEnum("roles", ["user", "trusted", "mod", "dev", "admin", "jazza"]);

export const user = pgTable("user", {
	id: text("id").primaryKey(), // ID generated by this website
	oauthId: text("oauth_id").unique().notNull(), // ID from github OR scratch username
	username: text("username").notNull(), // Github username OR scratch username
	displayName: text("display_name"), // Autofilled with github display name, empty for scratch
	oauthProvider: text("oauth_provider").notNull(), // GitHub or scratch
	role: roles("role").notNull().default("user"), // See ./perms.md
	strikes: integer("strikes").notNull().default(0), // User gets ONE chance. Integer not boolean in case that changes
	banned: boolean("banned").notNull().default(false), // Comment for consistency
	authorised: boolean("authorised").notNull().default(false), // Authorised to use a GitHub account
});

export const session = pgTable("session", {
	id: text("id").primaryKey(),
	userId: text("user_id")
		.notNull()
		.references(() => user.id),
	expiresAt: timestamp("expires_at", { withTimezone: true, mode: "date" }).notNull(),
});

export const image = pgTable("image", {
	id: text("id").primaryKey(),
	url: text("url").notNull(),
	resolution: json("resolution").$type<{ x: number; y: number }>(),
	cloudinaryId: text("cloudinary_id").unique(),
});

export const suggestion = pgTable("suggestion", {
	id: text("id").primaryKey(),
	authorId: text("author_id")
		.notNull()
		.references(() => user.id),
	title: text("title").notNull(),
	description: text("description").notNull().default("*no description given*"),
	voterIds: text("voter_ids")
		.references(() => user.id)
		.array()
		.notNull()
		.default([]),
	tag: tag("tag").notNull(),
	status: status("status").notNull().default("pending"),
	imageIds: text("image_ids")
		.references(() => image.id)
		.array(),
	createdAt: timestamp("created_at", { withTimezone: true, mode: "date" }).notNull().defaultNow(),
});

export type Session = typeof session.$inferSelect;

export type User = typeof user.$inferSelect;

export type Suggestion = typeof suggestion.$inferSelect;

export type Image = typeof image.$inferSelect;
